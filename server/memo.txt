 socket() 생성 > bind() 주소할당 > listen() > accept() > read() ,write() > close(;)

 int socket( int domain, int type, int protocol );
 	--> 성공 시 파일디스크립터(이하 fd), 실패시 -1 반환.
     ㄴ. domain   : 소켓이 사용할 프로토콜 체계(Protocol Family) 정보 전달
     ㄴ. type     : 소켓의 데이터 전송방식에 대한 정보 전달
     ㄴ. protocol : 두 컴퓨터간 통신에 사용되는 프로토콜 정보 전달

### select 

#include <sys/select.h>
#include <sys/time.h>
 
int select( int maxfd,
            fd_set* readset,
            fd_set* writeset,
            fd_set* exceptset,
            const struct timeval* timeout);        
    --> 성공 시 0이상, 실패 시 -1 반환
    
    ㄴ. maxfd     : 검사 대상이 되는 파일 디스크립터의 수
    ㄴ. readset   : "수신된 데이터의 존재여부"를 볼 fd_set의 주소 전달
    ㄴ. writeset  : "블로킹 없는 데이터 전송의 가능여부"를 볼 fd_set의 주소 전달
    ㄴ. exceptset : "예외상황의 발생여부"를 볼 fd_set의 주소 전달
    
    ㄴ. timeout   : 무한정 블로킹을 방지할 타임아웃 설정 인자를 전달
    ㄴ. 반환값     : 오류시 -1, 타임 아웃시 0
                     정상 반환 시 1이상으로 변화가 발생 한 fd의 수를 반환한다.


FD_ZERO(fd_set* fdset) : 인자로 전달된 주소의 fd_set형 변수의 모든 비트를 0으로 초기화
 
FD_SET(int fd, fd_set* fdset) : 매개변수 fdset으로 전달된 주소의 변수에
                                매개변수 fd로 전달된 파일 디스크립터 정보를 등록한다.
                                (fdset의 fd를 1로 세팅한다 = 등록)
 
FD_CLR(int fd, fd_set* fdset) : 매개변수 fdset으로 전달된 주소의 변수에
                                매개변수 fd로 전달된 파일 디스크립터 정보를 삭제한다.
                                (fdset의 fd를 0으로 세팅한다 = 삭제)
                                
FD_ISSET(int fd, fd_set* fdset) : 매개변수 fdset으로 전달된 주소의 변수에
                                  매개변수 fd로 전달된 파일 디스크립터 정보가 있으면 양수 반환
                                  (fdset의 fd의 변화를 확인함)

* 참조 : https://aronglife.tistory.com/entry/NetworkTCPIP-%EB%A9%80%ED%8B%B0%ED%94%8C%EB%A0%89%EC%8B%B12select-%ED%95%A8%EC%88%98%EB%A1%9C-%EA%B5%AC%ED%98%84